<% include header %>
<link rel="stylesheet" href="stylesheets/performance.css">
		<!--/span-->
		<div class="view-wrapper">
			<div class="container">
					<div id="plot-view">
						<div id="all-view"></div>
						<div id="load-view"></div>
						<div id="domReady-view"></div>
						<div id="networkLatency-view"></div>
					</div>

					<div>
						<div class="clearfix">
							<dl class="dl-horizontal data-dimension pull-left hide">
								<dt>Location:</dt>
								<dd>
									<ul class="options">
										<li><a href="#">Country</a></li>
									</ul>
								</dd>
							</dl>

							<dl class="dl-horizontal data-dimension pull-left hide">
								<dt>Browser:</dt>
								<dd>
									<ul class="options">
										<li><a href="#">Browser</a></li>
										<li><a href="#">Browser &amp; Version</a></li>
									</ul>
								</dd>
							</dl>
						</div>
						<table id="table-view" class="table table-striped">
							<thead></thead>
							<tbody></tbody>
						</table>
					</div>
			</div>
			<!--/row-->
			<hr>
			<footer>
			<p>
				&copy; Lightinthebox.com 2012
			</p>
			</footer>
		</div>
		<!--/span-->
		<!--/row-->
	<div id="loadMask" class="hide">
		<div class="meter animate">
			<span style="width: 0"><span></span></span>
		</div>
	</div>
<!--/.fluid-container-->
<!-- Le javascript
    ================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/themes/base/jquery-ui.css" />
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="javascripts/jquery.cookie.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js"></script>
<script src="bootstrap/js/bootstrap.js"></script>
<script src="Highcharts-2.3.3/highcharts.js"></script>
<script src="javascripts/performance.js"></script>
<script src="javascripts/<%= type === 'mobile' ? 'mobile_performance_config.js' : 'pc_performance_config.js' %>"></script>

<script>
var abtags = ['ALL'],
	METRICS = {'load': 'Window Load', 'domReady': 'Dom Ready', 'networkLatency': 'Network Latency'},
	charts = {};

$('#page-type').change(function() {
	var templates = config.pageTemplates[$(this).val().substring($(this).val().indexOf('_') + 1)],
		tempId = null,
		options = '<option value="all">全部模板</option>';
	if ( typeof templates !== 'undefined' && templates !== null) {
		for (tempId in templates) {
			options += '<option value="' + tempId + '">' + templates[tempId] + '</option>';
		}
		$('#page-template').html(options).show();
	} else {
		$('#page-template').hide();
	}
});

$('#page-type').html(config.pageTypes);
<%= page !== "" ? "$('#page-type').val('"+page+"').change()" : "" %>
<%= template !== "" ? "$('#page-template').val('"+template+"')" : "" %>

$.each(config.countries, function(key, value) {
	$('#country').append('<option value="'+ key +'">'+ value +'</option>');
});
<%= country !== "" ? "$('#country').val('"+country+"')" : "" %>
$.each(config.browsers, function(key, value) {
	$('#browser').append('<option value="'+ key +'">'+ value +'</option>');
});
<%= browser !== "" ? "$('#browser').val('"+browser+"')" : "" %>

// Set query.cookie global options
$.cookie.json = true;
$.cookie.defaults = {path: '/'};

$('#date-start, #date-end').datepicker();

$.fn.setDate = function(date) {
	this.val( ('0'+(date.getMonth()+1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2) + '/' + date.getFullYear());
}

if ($('#date-end').val() === '') {
	var today = new Date();
	today.setDate(today.getDate() - 2);
	$('#date-end').setDate(today);
	today.setDate(today.getDate() - 15);
	$('#date-start').setDate(today);
}

function acquireData(options, success) {
	var startDate = new Date($('#date-start').val()),
		endDate = new Date($('#date-end').val()),
		dateUnit = $('#date-unit').val(),
		browser = $('#browser').val(),
		country = $('#country').val(),
		pageType = $('#page-type').val(),
		pageTemplate = $('#page-template').is(':visible') ? ('-'+$('#page-template').val()) : '';
	options = $.extend(
		{
			startdate: '' + startDate.getFullYear() + ('0'+(startDate.getMonth()+1)).slice(-2) + ('0' + startDate.getDate()).slice(-2),
			enddate: '' + endDate.getFullYear() + ('0'+(endDate.getMonth()+1)).slice(-2) + ('0' + endDate.getDate()).slice(-2),
			dateunit: dateUnit,
			site: pageType.substring(0, pageType.indexOf('_')),
			page: pageType.substring(pageType.indexOf('_') + 1) + pageTemplate,
			browser: browser,
			country: country
		}, options
	);
	<%- type === 'mobile' ? 'options.browser = "m_" + options.browser' : '' %>
	<%- type === 'mobile' ? 'options.page = "m_" + options.page' : '' %>
	<%- type === 'mobile' ? 'options.site = "m_" + options.site' : '' %>
	var allData = {};
	$.each(abtags, function(i, abtag) {
		dataUtil.getPerformanceData($.extend({'abtag': abtag}, options), function(data) {
			if (data == null || typeof(data.length) == 'undefined' || data.length == 0) {
				alert('数据异常，请联系管理员。<a href="mailto:wangshishuo@Lightinthebox.com">wangshishuo@lightinthebox.com</a>');
				return false;
			}
			allData[abtag] = data;
			var j = 0;
			for (; j<abtags.length; j++) {
				if (!allData[abtags[j]])
					break;
			}
			if (j === abtags.length) {
				success(allData);
			}
		}, function() {
			notification.show('获取数据失败，请联系管理员。<a href="mailto:wangshishuo@Lightinthebox.com">wangshishuo@lightinthebox.com</a>');
		});
	})
}

var ONE_DAY = 24 * 3600 * 1000,
	EIGHT_HOURS = 8 * 3600 * 1000;

function drawPlot(options, done) {
	if (options && options['browser & version']) {
		$('#browser').val(options['browser & version']);
	} else if (options && options.browser) {
		$('#browser').val(options.browser);
	}
	if (options && options.country) {
		$('#country').val(options.country);
	}
	acquireData(options, function(allData) {
		$.each(charts, function(key, chart) {
			if (chart) {
				chart.destroy();
				charts[key] = null;
			}
		});

		if (abtags.length > 1) {
			$.each(METRICS, function(metric) {
				var series = [],
					data = allData[abtags[0]], i = 0;
				for (; i < data.length; i++) {
					var date = (data[i].date+'').split('');
					date.splice(6, 0, '/');
					date.splice(4, 0, '/');
					var j = 0;
					for (;j < abtags.length; j++) {
						if (i === 0) {
							series.push({name: abtags[j], data: []});
						}
						series[j].data.push({x: new Date(date.join('')).getTime() + EIGHT_HOURS, y: allData[abtags[j]][i][metric]});
					}
				}

				if (charts[metric]) {
					charts[metric].destroy();
				}
				charts[metric] = new Highcharts.Chart({
					chart: {
						renderTo: metric + '-view',
						type: 'line'
					},
					title: {
						text: METRICS[metric],
					},
					subtitle: {
						text:
							(($('#browser').val() !== 'all') ? ('Browser:' + config.browsers[$('#browser').val()]+' ') : '') +
							(($('#country').val() !== 'all') ? ('Country:' + config.countries[$('#country').val()]) : ''),
		            style: {
		                color: '#FF0000'
		            }
					},
					xAxis: {
						type: 'datetime',
						minTickInterval: ONE_DAY
					},
					yAxis: {
						title: {
							text: 'Performance Timing'
						},
						labels: {
							formatter: function () {
								return this.value + 'ms';
							}
						}
					},
					plotOptions: {
						line: {
							//stacking: 'normal',
							marker: {
								//enabled: false,
								//symbol: 'circle',
								//radius: 2
							}
						}
					},
					series: series
				});
			});
		} else {
			var series = [],
				data = allData[abtags[0]], i = 0;
			for (; i < data.length; i++) {
				var date = (data[i].date+'').split('');
				date.splice(6, 0, '/');
				date.splice(4, 0, '/');
				var j = 0;
				$.each(METRICS, function(metric) {
					if (i === 0) {
						series.push({name: METRICS[metric], data: []});
					}
					series[j++].data.push({x: new Date(date.join('')).getTime() + EIGHT_HOURS, y: data[i][metric]});
				});
			}

			if (charts['all']) {
				charts['all'].destroy();
			}
			charts['all'] = new Highcharts.Chart({
				chart: {
					renderTo: 'all-view',
					type: 'area'
				},
				title: {
					text: 'FrontEnd Performance',
				},
				subtitle: {
					text:
						(($('#browser').val() !== 'all') ? ('Browser:' + config.browsers[$('#browser').val()]+' ') : '') +
						(($('#country').val() !== 'all') ? ('Country:' + config.countries[$('#country').val()]) : ''),
	            style: {
	                color: '#FF0000'
	            }
				},
				xAxis: {
					type: 'datetime',
					minTickInterval: ONE_DAY
				},
				yAxis: {
					title: {
						text: 'Performance Timing'
					},
					labels: {
						formatter: function () {
							return this.value + 'ms';
						}
					}
				},
				plotOptions: {
					area: {
						//stacking: 'normal',
						marker: {
							enabled: false,
							//symbol: 'circle',
							//radius: 2
						}
					}
				},
				series: series
			});
		}	
		if (done) {
			done.call();
		}
	});
};

(function drawTable() {
	function combineAB(data) {
		var result = $.extend({}, data[abtags[0]][0]),
			i = 1;
		result['proportion'] = result['count'];
		for (; i < abtags.length; i++) {
			$.each(METRICS, function(metric) {
				result[metric] += ' / ' + data[abtags[i]][0][metric];
			});
			result['count'] += ' / ' + data[abtags[i]][0]['count'];
			if (abtags[0] !== 'ALL') {
				result['proportion'] += data[abtags[i]][0]['count'];
			}
		}
		return result;
	}
	var dataGenerator = {
		getData: function(dims) {
			var data = new Array(), result = new Array(),
				i = 0, j = 0, k = 0;
			if (dims && dims.length > 0) {
				data.push(new Object());
				for (; i < dims.length; i++) {
					var temp = new Array();
					for (j = 0; j < config.dimensions[dims[i].toLowerCase()].length; j++) {
						for (k = 0; k < data.length; k++) {
							var obj = new Object();
							if (dims[i].toLowerCase() === 'browser & version') {
								obj['browser'] = config.dimensions[dims[i].toLowerCase()][j];
							} else {
								obj[dims[i].toLowerCase()] = config.dimensions[dims[i].toLowerCase()][j];
							}
							temp.push($.extend(obj, data[k]));
						}
					}
					data = temp;
				}
				for (i = 0; i < data.length; i++) {
					acquireData($.extend({dateunit: 'all'}, data[i]), function(resp) {
						result.push(combineAB(resp));
						// All requires have returned.
						if (result.length === data.length) {
							toDraw(dims, result);
						}
					});
				}
			} else {
				acquireData({dateunit: 'all'}, function(resp) {
					result.push(combineAB(resp));
					toDraw(dims, result);
				});
			}
			return data;
		}
	};

	var toDraw = function(dimensions, data) {
		var allVisits = 0, m = 0;
		for (; m < data.length; m++) {
			allVisits += parseInt(data[m]['proportion']);
		}
		for (m = 0; m < data.length; m++) {
			data[m]['Proportion'] = Math.round(data[m]['proportion'] / allVisits * 100);
		}
		if (dimensions && dimensions.length > 0) {
			for (m = 0; m < dimensions.length; m++) {
				data.sort(function(a, b) {
					if (dimensions[m] === 'Country')
						return config.countries[a['country']] > config.countries[b['country']]
					else
						return config.browsers[a[dimensions[m].toLowerCase()]] > config.browsers[b[dimensions[m].toLowerCase()]]
				})
			}
		}
		draw(dimensions, data);
	};

	var draw = function(dimensions, data){
		var theadHtml = '<tr><th><a href="javascript:void(0)" class="allPlotViewBtn icon-picture"></a></th>',
			tbodyHtml = '';
		for (var m = 0; m < data.length; m++) {
			var rowHtml = '<tr><td><a href="javascript:void(0)" class="plotViewBtn icon-picture"></a></td>',
				highlight = 0; // -1:never 0:maybe 1:can
			if (dimensions && dimensions.length > 0) {
				for (var i = 0; i < dimensions.length; i++) {
					if (m == 0) {
						theadHtml += '<th>' + dimensions[i] + ' <a href="#"><i class="icon-remove"></i></a></th>';
					}
					if (dimensions[i].toLowerCase() === 'country') {
						rowHtml += '<td><em data-value="' + data[m][dimensions[i].toLowerCase()] + '">' + config.countries[data[m][dimensions[i].toLowerCase()]] + '</em></td>';
						($('#country').val() !== 'all' && data[m][dimensions[i].toLowerCase()] !== $('#country').val()) && (highlight = -1);
						($('#country').val() !== 'all' && data[m][dimensions[i].toLowerCase()] === $('#country').val()) && (highlight >= 0) && (highlight = 1);
					} else if (dimensions[i].toLowerCase() === 'browser') {
						rowHtml += '<td><em data-value="' + data[m][dimensions[i].toLowerCase()].replace('m_', '') + '">' + config.browsers[data[m][dimensions[i].toLowerCase()].replace('m_', '')] + '</em></td>';

						($('#browser').val() !== 'all' && data[m][dimensions[i].toLowerCase()].replace('m_', '') !== $('#browser').val()) && (highlight = -1);
						($('#browser').val() !== 'all' && data[m][dimensions[i].toLowerCase()].replace('m_', '') === $('#browser').val()) && (highlight >= 0) && (highlight = 1);
					} else if (dimensions[i].toLowerCase() === 'browser & version') {
						rowHtml += '<td><em data-value="' + data[m]['browser'].replace('m_', '') + '">' + config.browsers[data[m]['browser'].replace('m_', '')] + '</em></td>';
						($('#browser').val() !== 'all' && data[m]['browser'].replace('m_', '') !== $('#browser').val()) && (highlight = -1);
						($('#browser').val() !== 'all' && data[m]['browser'].replace('m_', '') === $('#browser').val()) && (highlight >= 0) && (highlight = 1);
					}
				}
				(highlight > 0) && (rowHtml = rowHtml.replace('<tr>', '<tr class="hl">'));
			}

			if (m == 0) {
				$.each(METRICS, function(metric) {
					theadHtml += '<th>' + METRICS[metric] + ' (ms)';
					if (abtags.length > 1) {
						theadHtml += '<br/>';
						var j = 0;
						for (;j < abtags.length; j++) {
							if (j !== 0) {
								theadHtml += ' / ';
							}
							theadHtml += abtags[j];
						}
					}
					theadHtml += '</th>';
				});
				theadHtml += '<th>Visits';
				if (abtags.length > 1) {
					theadHtml += '<br/>';
					var j = 0;
					for (;j < abtags.length; j++) {
						if (j !== 0) {
							theadHtml += ' / ';
						}
						theadHtml += abtags[j];
					}
				}
				theadHtml += '</th><th>Proportion</th>';
			}
			$.each(METRICS, function(metric) {
				rowHtml += '<td>' + data[m][metric] + '</td>';
			});
			rowHtml += '<td>' + data[m]['count'] + '</td>' +
						'<td><div style="width: ' + data[m]['Proportion'] + 'px;" class="per-bar"></div><span>' + data[m]['Proportion'] + '%</span></td>';

			tbodyHtml += rowHtml + '</tr>';
		}
		$('#table-view > thead').html(theadHtml + '</tr>');
		$('#table-view > tbody').html(tbodyHtml);
		$('.data-dimension').show();
	};

	redrawTable = function() {
		var dimensions = new Array();
		$.each($('.data-dimension'), function() {
			$.each($('li', this), function() {
				if ($('a', this).length === 0) {
					dimensions.push($.trim($(this).text()));
				}
			});
		});

		dataGenerator.getData(dimensions);
	};
}());

function redraw() {
	$.each($('.data-dimension'), function() {
		$.each($('li', this), function() {
			if ($('a', this).length === 0) {
				if ($(this).text() === 'Browser') {
					if (/\d/.test($('#browser').val())) { // browser & version selected
						$(this).wrapInner('<a href="#" />');
					}
				} else if ($(this).text() === 'Browser & Version') {
					if (/-all/.test($('#browser').val())) { // browser selected
						$(this).wrapInner('<a href="#" />');
					}
				}
			} else {
				if ($(this).text() === 'Browser' && /-all/.test($('#browser').val())) {
					$(this).text($('a', this).text());
				} else if ($(this).text() === 'Browser & Version' && /\d/.test($('#browser').val())) {
					$(this).text($('a', this).text());
				} else if ($(this).text() === 'Country' && $('#country').val() !== 'all') {
					$(this).text($('a', this).text());
				}
			}
		});
	});
	drawPlot();
	redrawTable();
}

// init
redraw();

$('#apply-btn').click(function() {
	var canceled = dataUtil.cancel()
	canceled && notification.show('You have canceled previous operation.')

	redraw()

	canceled ? replaceState() : pushState()
});

$('.data-ab').click(function() {
	if ($('.data-ab:checked').length === 0) {
		notification.show('Check one option at the least.')
		return false;
	}
	resetAB();
});

function resetAB() {
	abtags = [];
	$('.data-ab:checked').each(function() {
		abtags.push($(this).val());
	});
}

$('.data-dimension li a').live('click', function() {
	if ($(this).text() === 'Browser') {
		$(this).parent().next().html('<a href="#">Browser & Version</a>');
	} else if ($(this).text() === 'Browser & Version') {
		$(this).parent().prev().html('<a href="#">Browser</a>');
	}
	$(this).parent().text($(this).text());
	redrawTable();
	return false;
});

$('#table-view th > a').live('click', function() {
	var dim = new Object(),
		dimStr = $.trim($(this).parent().text());
	$('.data-dimension li').each(function() {
		if ($.trim($(this).text()) === dimStr) {
			$(this).wrapInner('<a href="#" />');
			dim[dimStr.toLowerCase()] = 'all';
		}
	});
	drawPlot(dim);
	redrawTable();

	pushState()

	return false;
});

$('#table-view .allPlotViewBtn').live('click', function() {
	drawPlot({country: 'all', browser: 'all'});

	pushState()
});

$('#table-view .plotViewBtn').live('click', function() {
	var dim = new Object(),
		dimElems = $(this).parent().siblings().children('em');
	for (var i = 0; i < dimElems.length; i++) {
		var idx = $(dimElems[i]).parents('tr').children().index($(dimElems[i]).parent());
		var metric = $('#table-view > thead > tr > th:eq('+idx+')').text().toLowerCase().trim();
		dim[metric === 'browser & version' ? 'browser' : metric] = $(dimElems[i]).attr('data-value');
	}
	drawPlot($.extend({'country':'all', 'browser':'all'}, dim));
	if ($('#table-view tr').length > 2) {
		$(this).parents('tr').addClass('hl').siblings().removeClass('hl');
	}

	pushState()
});

/**
 * Used for showing notification.
 *
 */
var notification = {
	timeout: null,
	show: function(html) {
		$('#notif').html(html).show();
		clearTimeout(this.timeout);
		this.timeout = setTimeout(function() {
			$('#notif').fadeOut();
		}, 10 * 1000);
	}
}

$(window).keydown(function(e) {
	if (e.which === 27) {
		//dataUtil.cancel();
		return false;
	}
});

window.onpopstate = function(e) {
	if (e.state) {
		setOptions(e.state)

		dataUtil.cancel()

		redraw()
	}
}
replaceState()

</script>

</body>
</html>
